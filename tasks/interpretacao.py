# -*- coding: utf-8 -*-
"""
Tarefas de Interpreta√ß√£o Jur√≠dica - Sistema Multi-Agente
Define as tarefas que os agentes devem executar para interpretar consultas jur√≠dicas
"""

from crewai import Task

def create_coordenacao_task(pergunta_usuario):
    """
    Tarefa para o coordenador analisar e direcionar a consulta
    """
    coordenacao_task = Task(
        description=f'''Analisa a seguinte consulta jur√≠dica de um utilizador portugu√™s:
        
        CONSULTA: "{pergunta_usuario}"
        
        A tua fun√ß√£o √©:
        1. Analisar a consulta e identificar a(s) √°rea(s) do direito envolvida(s)
        2. Determinar qual especialista deve responder (Civil, Penal, Comercial)
        3. Fornecer contexto sobre por que essa especializa√ß√£o foi escolhida
        4. Identificar os principais conceitos jur√≠dicos envolvidos
        5. Preparar instru√ß√µes espec√≠ficas para o especialista
        
        IMPORTANTE:
        - Se a consulta envolver m√∫ltiplas √°reas, indica todas
        - Se n√£o for clara, pede esclarecimentos
        - Inclui sempre que √© uma consulta sobre direito portugu√™s
        
        RESULTADO ESPERADO:
        An√°lise clara da consulta com direcionamento para o especialista adequado,
        incluindo contexto e conceitos-chave a abordar.''',
        
        expected_output='''An√°lise estruturada contendo:
        1. Resumo da consulta
        2. √Årea(s) do direito identificada(s)
        3. Especialista recomendado
        4. Conceitos jur√≠dicos principais
        5. Instru√ß√µes para o especialista
        6. Observa√ß√µes relevantes''',
        
        agent=None  # Ser√° atribu√≠do na cria√ß√£o da crew
    )
    
    return coordenacao_task

def create_interpretacao_juridica_task(pergunta_usuario, area_direito):
    """
    Tarefa para especialista interpretar quest√£o jur√≠dica espec√≠fica
    """
    interpretacao_task = Task(
        description=f'''Como especialista em {area_direito} portugu√™s, analisa e responde 
        √† seguinte consulta jur√≠dica:
        
        CONSULTA: "{pergunta_usuario}"
        √ÅREA: {area_direito}
        
        A tua resposta deve incluir:
        1. ENQUADRAMENTO LEGAL: Artigos espec√≠ficos aplic√°veis
        2. CONCEITOS JUR√çDICOS: Defini√ß√£o clara dos termos t√©cnicos
        3. EXPLICA√á√ÉO: Interpreta√ß√£o acess√≠vel da legisla√ß√£o
        4. JURISPRUD√äNCIA: Orienta√ß√µes dos tribunais superiores (se relevante)
        5. CONSIDERA√á√ïES PR√ÅTICAS: Aspectos importantes a considerar
        6. AVISO LEGAL: Disclaimer obrigat√≥rio sobre natureza informativa
        
        METODOLOGIA:
        - Cita sempre os artigos espec√≠ficos (ex: "art. 405¬∫ do C√≥digo Civil")
        - Explica conceitos t√©cnicos de forma clara
        - Distingue diferentes situa√ß√µes quando aplic√°vel
        - Refere legisla√ß√£o complementar relevante
        - Inclui jurisprud√™ncia consolidada
        
        LIMITA√á√ïES:
        - N√ÉO d√™s conselhos sobre a√ß√µes espec√≠ficas a tomar
        - N√ÉO substitui consulta com advogado
        - Foca na informa√ß√£o jur√≠dica geral e educativa''',
        
        expected_output='''Resposta jur√≠dica estruturada contendo:
        1. Resumo da quest√£o
        2. Base legal com artigos espec√≠ficos
        3. Explica√ß√£o clara dos conceitos
        4. Jurisprud√™ncia relevante (se aplic√°vel)
        5. Considera√ß√µes pr√°ticas
        6. Aviso legal obrigat√≥rio
        
        Formato: Texto claro, bem estruturado, com cita√ß√µes precisas
        e linguagem acess√≠vel mantendo rigor t√©cnico.''',
        
        agent=None  # Ser√° atribu√≠do na cria√ß√£o da crew
    )
    
    return interpretacao_task

def create_validacao_resposta_task():
    """
    Tarefa para validar e melhorar a resposta final
    """
    validacao_task = Task(
        description='''Revisa e valida a resposta jur√≠dica fornecida pelo especialista,
        garantindo que:
        
        VALIDA√á√ÉO DE CONTE√öDO:
        1. As cita√ß√µes legais est√£o corretas e precisas
        2. Os conceitos jur√≠dicos est√£o bem explicados
        3. A informa√ß√£o est√° atualizada conforme legisla√ß√£o portuguesa
        4. A resposta √© completa e responde √† pergunta
        
        VALIDA√á√ÉO DE FORMA:
        1. Linguagem √© clara e acess√≠vel
        2. Estrutura √© l√≥gica e bem organizada
        3. Inclui o aviso legal obrigat√≥rio
        4. N√£o cont√©m conselhos jur√≠dicos espec√≠ficos
        
        MELHORIAS:
        1. Adiciona informa√ß√µes relevantes em falta
        2. Clarifica pontos confusos
        3. Melhora a estrutura se necess√°rio
        4. Garante compliance com limita√ß√µes √©ticas
        
        Se encontrares problemas significativos, indica as corre√ß√µes necess√°rias.
        Se a resposta estiver adequada, confirma e apresenta a vers√£o final.''',
        
        expected_output='''Resposta jur√≠dica validada e otimizada, contendo:
        1. Confirma√ß√£o da qualidade da resposta OU lista de corre√ß√µes
        2. Vers√£o final melhorada (se necess√°rio)
        3. Verifica√ß√£o de compliance com avisos legais
        4. Confirma√ß√£o de adequa√ß√£o √†s limita√ß√µes √©ticas
        
        A resposta final deve ser precisa, clara, completa e eticamente adequada.''',
        
        agent=None  # Ser√° atribu√≠do na cria√ß√£o da crew
    )
    
    return validacao_task

def test_tasks():
    """Teste das tarefas"""
    try:
        # Teste com pergunta exemplo
        pergunta_teste = "Quais s√£o os requisitos para um contrato de compra e venda ser v√°lido?"
        
        # Criar tarefas
        coordenacao = create_coordenacao_task(pergunta_teste)
        interpretacao = create_interpretacao_juridica_task(pergunta_teste, "Direito Civil")
        validacao = create_validacao_resposta_task()
        
        print("‚úÖ Tarefa de Coordena√ß√£o criada")
        print("‚úÖ Tarefa de Interpreta√ß√£o Jur√≠dica criada")  
        print("‚úÖ Tarefa de Valida√ß√£o criada")
        
        return True
    except Exception as e:
        print(f"‚ùå Erro ao criar tarefas: {e}")
        return False

if __name__ == "__main__":
    print("üìã Testando Sistema de Tarefas...")
    print("-" * 50)
    
    success = test_tasks()
    
    if success:
        print("\nüéâ Sistema de Tarefas est√° pronto!")
        print("üìù Tarefas dispon√≠veis:")
        print("  - Coordena√ß√£o e an√°lise")
        print("  - Interpreta√ß√£o jur√≠dica especializada")
        print("  - Valida√ß√£o e otimiza√ß√£o")
    else:
        print("\n‚ùå Erro na cria√ß√£o das tarefas")